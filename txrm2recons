#!/usr/bin/python

"""
(C) Copyright 2015 Marc Rosanes
The program is distributed under the terms of the 
GNU General Public License (or the Lesser GPL).

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import time
import argparse
from argparse import RawTextHelpFormatter


def str2bool(v):
    return v.lower() in ("yes", "true", "t", "1")


description = ("Reconstruction: txrm2nexus + normalize + deconvolve"
               + " + absorbance stack + align projections" 
               + " + reconstruction + trim")
parser = argparse.ArgumentParser(description=description,
                                 formatter_class=RawTextHelpFormatter)
parser.register('type', 'bool', str2bool)

# Input files in txrm format
parser.add_argument('raw_data_txrm', type=str, 
                    help='Enter txrm containing raw data stack.')
parser.add_argument('raw_FF_txrm', type=str, 
                    help='Enter txrm containing raw FF stack.')

# Arguments for deconvolution
parser.add_argument('-d', '--deconvolution', type='bool',
                    default='True',
                    help="Deconvolve mrc normalized stacks (default: True)")
parser.add_argument('-zp', '--zp-size', type=int, default=25,
                    help="ZP zones size (in nm)\n"
                         + "(default: 25)")        
parser.add_argument('-e', '--energy', type=float, default=520,
                    help="Energy for deconvolution\n"
                         + "(default: 520)")
parser.add_argument('-dx', type=float, default=12,
                    help="dx for deconvolution \n"
                         + "(default: 12)")  
parser.add_argument('-k', '--kw', type=float, default=0.02,
                    help="kw for deconvolution\n"
                         + "(default: 0.02)")
parser.add_argument('-t', '--thickness', type=int, default=20,
                    help="Sample thickness for deconvolution (in um)\n"
                         + "(default: 20)")
psf_dir = "/beamlines/bl09/controls/user_resources/psf_directory"
parser.add_argument('-p', '--psf-dir', type=str, default=psf_dir, 
                    help="PSF directory\n"
                         + "(default: " + psf_dir + " )")

# Absorbance stack (Minus napierian logarithm of transmittance stack)  
parser.add_argument('-l', '--minus_ln', type='bool', default='True',
                    help="Compute absorbance stack [-ln(mrc)]\n"
                         + "(default: True)")

# Alignment (or not) of different projections along the stack
# Alignment with fiducials or without fiducials
parser.add_argument('-a', '--align', type='bool', default=1, 
                    help='Alignment of projections along' 
                         + ' the stack (default=1)')
# Alignment with fiducials or without fiducials
parser.add_argument('-f', '--fiducials', type='bool', default='True',
                    help="Align using ctalign: -f=False"
                         + " (typically used for non-fiducial alignment)\n"
                         + "Align using ctalignxcorr: -f=True"
                         + " (typically used for fiducial alignment)\n"
                         + "(default: True)")
# Arguments for ctalign (alignment without fiducials)
parser.add_argument('-r', '--roi', type=int, default=0, 
                    help='Option for allowing ROI selection (default=0)')
parser.add_argument('-x', '--nroihoriz', type=int, default=1, 
                    help='Used for multiple ROIs: Number of ROIs in ' +
                    'horizontal direction (default=1)')
parser.add_argument('-y', '--nroivert', type=int, default=1, 
                    help='Used for multiple ROIs: Number of ROIs in ' +
                    'vertical direction (default=1)')
parser.add_argument('-ww', '--width', type=int, default=200, 
                    help='Used for multiple ROIs: Width of ROI in pixels.')
parser.add_argument('-hh', '--height', type=int, default=200, 
                    help='Used for multiple ROIs: Height of ROI in pixels.')

# Reconstruction: Number of iterations for the Reconstruction
parser.add_argument('-i', '--iterations', type=int, default=30, 
                    help='Iterations for tomo3d (default=30)')

args = parser.parse_args()
start_time = time.time()


def convert_hdf2mrc(norm_file, tree="TomoNormalized/TomoNormalized", 
                    suffix_description = ""):
    """ Convert from hdf5 to mrc"""
    print("CONVERSION FROM HDF5 TO MRC " + suffix_description 
          + ": -------------------")
    tree_hdf5 = tree + "@" + norm_file
    norm_file = os.path.splitext(norm_file)[0] + ".mrc"
    cmd = ("scipion xmipp_image_convert -i " + tree_hdf5 + " -o " + norm_file)
    print(cmd)
    os.system(cmd)
    return norm_file


# CONVERSION FROM TXRM TO HDF5
print("CONVERSION FROM TXRM TO HDF5: -------------------")
raw_data_txrm = args.raw_data_txrm
raw_FF_txrm = args.raw_FF_txrm
cmd = "txrm2nexus " + raw_data_txrm + " " + raw_FF_txrm + " -o=sb"
print(cmd)
os.system(cmd)
date = raw_data_txrm.split("_")[0]

############ Only for test purposes; do not use in normal executions
#raw_hdf5 = "20161203_tomo01_-11348.1.hdf5" ######### To be removed
#date = raw_hdf5.split("_")[0]
###############

# NORMALIZATION
print("NORMALIZATION: -------------------")
raw_hdf5 = os.path.splitext(raw_data_txrm)[0] + ".hdf5"
cmd = "normalize " + raw_hdf5
print(cmd)
os.system(cmd)
norm_file = os.path.splitext(raw_hdf5)[0] + "_norm.hdf5"
norm_file_hdf5 = norm_file
print("EXTRACT_ANGLES: -------------------")
cmd = "extract_angle " + norm_file
print(cmd)
os.system(cmd)

# CONVERSION
if (not args.deconvolution and not args.minus_ln and not args.align):
    norm_file = convert_hdf2mrc(
                    norm_file_hdf5, tree="TomoNormalized/TomoNormalized",
                    suffix_description = "TO APPLY RECONSTRUCTION")
elif (not args.deconvolution and not args.minus_ln
      and args.align and args.fiducials):
    norm_file = convert_hdf2mrc(
                    norm_file_hdf5, tree="TomoNormalized/TomoNormalized",
                    suffix_description = "TO APPLY ALIGNXCORR")           
# DECONVOLUTION
elif args.deconvolution:
    print("DECONVOLUTION: -------------------")
    arguments = [args.zp_size, args.energy, date, norm_file, 
                 args.dx, args.kw, args.thickness, args.psf_dir]
    args_str = " ".join(str(arg) for arg in arguments)
    cmd = "tomo_deconv_wiener " + args_str
    print(cmd)
    os.system(cmd)
    time.sleep(2)
    print("Deconvolution has been applied")
    for fname in os.listdir('.'):
        is_file = os.path.isfile(fname)
        if is_file and ("norm_deconv" in fname and ".mrc" in fname):
            norm_file = fname
            print("Deconvoluted file: " + norm_file)
            break

# ABSORBANCE STACKS (MINUS NATURAL LOGARITHM: -LN)
if args.minus_ln:
    print("COMPUTE ABSORBANCE STACKS (-LN): -------------------")
    if not args.align or (args.align and args.fiducials):
        cmd = "lnstacks " + norm_file
        norm_file = os.path.splitext(norm_file)[0] + "_ln.mrc"
    elif args.align and not args.fiducials:
        # Alignment without fiducials uses ctalign (.hdf5 is needed)
        cmd = "lnstacks " + norm_file + " -m=0"
        norm_file = os.path.splitext(norm_file)[0] + "_ln.hdf5" 
    print(cmd)
    os.system(cmd)

# ALIGNMENT
if args.align and args.fiducials:  
    print("ALIGN WITH XCORR (USUALLY WITH FIDUCIALS): -------------------")
    cmd = "ctalignxcorr " + norm_file + " " + norm_file_hdf5
    print(cmd)
    os.system(cmd)
    norm_file = os.path.splitext(norm_file)[0] + ".ali"
    norm_xzy = norm_file.replace(".ali","_recons.xzy")
    time.sleep(1)
elif args.align and not args.fiducials: 
    if args.deconvolution and not args.minus_ln:
        # Convert mrc to hdf5
        print("CONVERSION FROM MRC TO HDF5 TO APPLY CTALIGN"
              + ": -------------------")
        cmd = "mrc2hdf " + norm_file
        print(cmd)
        system.os(cmd)
        norm_file = os.path.splitext(norm_file)[0] + ".hdf5"
 
    print("ALIGN WITH CTALIGN (USUALLY WITHOUT FIDUCIALS)" 
          + ": -------------------")
    # Alignment using ctalign (input in hdf5)
    if args.roi == 1:
        print("User ROI choice")
        cmd = "ctalign " + norm_file + " -r " + str(args.roi)
        print(cmd)
        os.system(cmd)
    elif args.nroihoriz != 1 or args.nroivert != 1:
        print("Multiple ROIs")
        cmd = ("ctalign " + norm_file
               + " -x " + str(args.nroihoriz) + " -y " + str(args.nroivert)
               + " -ww " + str(args.width) + " -hh " + str(args.height))
        print(cmd)
        os.system(cmd)
    else:
        print("Default execution")
        cmd = "ctalign " + norm_file
        print(cmd)
        os.system(cmd)
    time.sleep(1)

    # Convert from hdf5 to mrc
    norm_hdf5 = os.path.splitext(norm_file)[0] + "_ali.hdf5"
    align_tree_hdf5 = 'FastAligned/tomo_aligned'  
    norm_file = convert_hdf2mrc(norm_hdf5, tree=align_tree_hdf5, 
                                suffix_description = "TO APPLY TOMO3D")
    recons_name = norm_file.replace("_ali","_recons")
    norm_xzy = os.path.splitext(recons_name)[0] + ".xzy"
    time.sleep(1)

norm_file_in = norm_file
volume_file_xzy = os.path.splitext(norm_file)[0] + "_recons.xzy"
    
print("RECONSTRUCTION: -------------------")
tilt_angles = "angles.tlt"
cmd = ("tomo3d -v 1 -l " + str(args.iterations) + " -z 500 -S -a "
       + tilt_angles + " -i " + norm_file_in + " -o " + volume_file_xzy)
print(cmd)
os.system(cmd)  # To uncomment

print("TRIM VOLUME: -------------------")
volume_file_xyz = volume_file_xzy.replace(".xzy",".mrc")
cmd = ("trimvol -yz " + volume_file_xzy + " " + volume_file_xyz)
print(cmd)
os.system(cmd)  # To uncomment

print("\nTOTAL ELAPSED TIME: -------------------")
print("--- %s minutes ---\n" % ((time.time() - start_time)/60))

#!/usr/bin/env bash

if [ "${1}" == "-h" ] ; then
    echo "xtend_recons needs, at least, two arguments:"
    echo '- ManyTomos output dir'
    echo '- Output dir'
    exit 0
fi

if [ $# -lt 2 ]
  then
    echo "Not enough arguments supplied"
    echo "Execute xtend_recons -h to show the help "
    exit -1
fi

echo `date`
start=`date +%s`

# xrm raw files
ManyTomosOutputDir=${1}
# output directory
Xrm2NexusOutputDir=${2}
ANGLES="angles.tlt"

# zone plate
if [ -z "${3}" ]; then
    ZP_DR=40
else
    ZP_DR=${3}
fi

# pixel size
if [ -z "${4}" ]; then
    DX=11.8
else
    DX=${4}
fi

# K value of deconvolution
if [ -z "${5}" ]; then
    KW=0.02
else
    KW=${5}
fi

# sample thickness of deconvolution
if [ -z "${6}" ]; then
    ZSIZE=4
else
    ZSIZE=${6}
fi

# directory with the corresponding Point Spread Function library
if [ -z "${7}" ]; then
    PSF_DIR="/beamlines/bl09/controls/user_resources/psf_directory"
else
    PSF_DIR=${7}
fi

# number of interation of the sirt reconstruction algorithm
if [ -z "${8}" ]; then
    ITERATIONS=30
else
    ITERATIONS=${8}
fi

# final reconstruction volume thickness (in pixels)
if [ -z "${9}" ]; then
    HEIGHT=500
else
    HEIGHT=${9}
fi

# align strategy (IMOD or ctalign)
if [ -z "${10}" ]; then
    ALIGNMENT_STRATEGY="IMOD"
else
    ALIGNMENT_STRATEGY=${10}
fi



manytomos2nexus $ManyTomosOutputDir --output-dir-name $Xrm2NexusOutputDir

root_path=`pwd`
#Frame + 1 col
CROPTYPE=2


# Reorganize files in folders by energies
for dir in $( ls -d $Xrm2NexusOutputDir/* ); do
    cd $dir
    for filename in $( ls *.hdf5 ); do
                
        energy=`echo $filename | cut -d'_' -f3`

        if [ ! -d "$energy" ]; then
            mkdir -p $energy
        fi
        
        mv $filename $energy
        
    done
    cd ..
done
cd $root_path


# First normalize and crop
# Then hdf_norm_crop to mrc
for i in $( ls $Xrm2NexusOutputDir/*/*/*.hdf5 ); do

    cd `dirname $i` 
    hdf2normcrop $i $CROPTYPE   
    CROP_FILE_NAME=${i%.*}_norm_crop.hdf5
    extract_angle $CROP_FILE_NAME
    scipion xmipp_image_convert -i $CROP_FILE_NAME -o ${i%.*}_norm_crop.mrc

done
cd $root_path


for dir in $( ls -d $Xrm2NexusOutputDir/*/* ); do
    cd $dir 

    echo "###################################################################################"
    echo $dir 
    echo "###################################################################################"

    echo "-----ALIGN PROJECTIONS AT DIFFERENT FOCI FOR EACH GIVEN ANGLE------"
    # At each angle align the projections of the samples at many focus: multifocus (different ZP, same angle). 
    mrc_array=($(ls *_norm_crop.mrc))
    reference=${mrc_array[1]}
    array=${mrc_array[@]/$reference}
    for e_mrc in ${array[@]}; do
        FIJI_PATHS=$FIJI_HOME/ImageJ-linux64:$FIJI_PLUGINS/TomoJ_2.32-jar-with-dependencies.jar:$FIJI_PLUGINS/TomoJ/Eftem_TomoJ_1.04.jar
        java -cp $FIJI_PATHS eftemtomoj.EFTEM_TomoJ -tsSignal ${dir}/${reference} 1 1 -tsBg ${dir}/${e_mrc} 2 1 -align NMI 0
    done
    echo "--------------------------------------------------------------------"

    # Rename output files. fiji add .mrc extension in the names
    for mrc in ${mrc_array[@]}; do
        fixed_name=${mrc%.*}
        mv ${mrc}_aligned.tif  ${fixed_name}_aligned.tif
        mv ${mrc}_aligned.transf ${fixed_name}_aligned.transf
    done

    echo "-------------------AVERAGE IMAGES--------------------------"
    # Fusion addition  (works with any foci number)
    n_zp_pos=${#mrc_array[@]}
    samplename=`echo ${mrc_array[0]} | cut -d "-" -f 1`
    fusename=${samplename}FS.mrc

    # mrc array without the two first elements
    ref_tif=${reference%.*}_aligned.tif

    for tif in ${array[@]}; do
        tif_name=${tif%.*}_aligned.tif
        if [ ! -f ${fusename} ]; then
            scipion xmipp_image_operate ${ref_tif} --plus $tif_name -o ${fusename}
        else
            scipion xmipp_image_operate ${fusename} --plus ${tif_name}
        fi
    done
    scipion xmipp_image_operate ${fusename} --divide $n_zp_pos
    echo "-----------------------------------------------------------"

    DATE=$(echo $fusename | cut -d'_' -f 1)
    ENERGY=$(echo $fusename | cut -d'_' -f 3)
    echo ${fusename}
    echo $DATE
    echo $ENERGY
    echo `pwd`
    echo "----------DECONVOLUTION:----------"
    echo "tomo_deconv_wiener ${ZP_DR} ${ENERGY} ${DATE} ${fusename} ${DX} ${KW} ${ZSIZE} ${PSF_DIR}"
    tomo_deconv_wiener ${ZP_DR} ${ENERGY} ${DATE} ${fusename} ${DX} ${KW} ${ZSIZE} ${PSF_DIR}
    echo "----------------------------------"

    
    echo "ALIGNMENT BETWEEN THE PROJECTIONS AT DIFFERENT ANGLES:-----"
    if [ "$ALIGNMENT_STRATEGY" == "ctalign" ]; then
            echo "Using ctalign"
            DECONV_FILE=`find -name "*_deconv_*"`
            mrc2hdf $DECONV_FILE
            DECONV_FILE_HDF=${DECONV_FILE%.mrc}.hdf5
            ctalign $DECONV_FILE_HDF

            # From hdf5 to mrc
            ALIGNED_HDF=`find -name "*_ali.hdf5"`
            align_tree_hdf5='FastAligned/tomo_aligned@'${ALIGNED_HDF}
            ALIGNED_MRC=${ALIGNED_HDF%.hdf5}.mrc
            scipion xmipp_image_convert -i $align_tree_hdf5 -o $ALIGNED_MRC
            sleep 2
            RECONS_XZY=${ALIGNED_MRC%_ali.mrc}_recons.xzy
    elif [ "$ALIGNMENT_STRATEGY" == "IMOD" ]; then
        echo "Using IMOD"
        tiltxcorr2newstack ${DECONV_FILE} ${ANGLES}
        ALIGNED_MRC=${DECONV_FILE%.mrc}.ali
        ANGLES=${DECONV_FILE%.mrc}.tlt 
        RECONS_XZY=${DECONV_FILE%.mrc}_recons.xzy
    fi
    echo "-----------------------------------------------------------"
    
    echo "------RECONSTRUCTION AND CHANGING VOLUME AXIS:-------------"
    # Reconstruct
    tomo3d -v 1 -l $ITERATIONS -z $HEIGHT -S -a $ANGLES -i $ALIGNED_MRC -o $RECONS_XZY
    RECONS_XYZ=${RECONS_XZY%.xzy}_recons.xyz
    trimvol -yz $RECONS_XZY $RECONS_XYZ
    sleep 1
    rm $RECONS_XZY

    RECONS_MRC=${fusename%.mrc}_recons.mrc
    mv $RECONS_XYZ $RECONS_MRC
    echo "-----------------------------------------------------------"

done


cd $root_path

### Time spent for completing the workflow #####################################
end=`date +%s`
runtime=$((end-start))
echo "Time to run: $runtime seconds"
################################################################################


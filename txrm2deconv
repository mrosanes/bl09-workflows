#!/usr/bin/python

"""
(C) Copyright 2015 Marc Rosanes
The program is distributed under the terms of the 
GNU General Public License (or the Lesser GPL).

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""


import os
import time
import argparse
from argparse import RawTextHelpFormatter


def str2bool(v):
    return v.lower() in ("yes", "true", "t", "1")


description = ("Reconstruction: txrm2nexus + normalize + deconvolve"
               + " + absorbance stack + align projections" 
               + " + reconstruction + trim")
parser = argparse.ArgumentParser(description=description,
                                 formatter_class=RawTextHelpFormatter)
parser.register('type', 'bool', str2bool)

# Input files in txrm format
parser.add_argument('filesdir',
                    type=str,
                    nargs='+', default=None,
                    help= ('\'Tomo projection\' and \'BrightField\' stack' 
                           + ' files, or \'Directory\' with subdirectories,' 
                           + ' each one of them containing a Tomo projection' 
                           + ' stack file and a BrighField stack file'))

parser.add_argument('-zp', '--zp-size', type=int, default=25,
                    help="ZP zones size (in nm)\n"
                         + "(default: 25)")        
parser.add_argument('-e', '--energy', type=int, default=520,
                    help="Energy for deconvolution\n"
                         + "(default: 520)")
parser.add_argument('-dx', type=int, default=12,
                    help="dx for deconvolution \n"
                         + "(default: 12)")  
parser.add_argument('-k', '--kw', type=int, default=0.02,
                    help="kw for deconvolution\n"
                         + "(default: 0.02)")
parser.add_argument('-t', '--thickness', type=int, default=20,
                    help="Sample thickness for deconvolution (in um)\n"
                         + "(default: 20)")
psf_dir = "/beamlines/bl09/controls/user_resources/psf_directory"
parser.add_argument('-p', '--psf-dir', type=str, default=psf_dir, 
                    help="PSF directory\n"
                         + "(default: " + psf_dir + " )")

# Absorbance stack (Minus napierian logarithm of transmittance stack)  
parser.add_argument('-l', '--minus_ln', type='bool', default='True',
                    help="Compute absorbance stack [-ln(mrc)]\n"
                         + "(default: True)")

# Convert output to hdf5
parser.add_argument('-hdf', '--hdf5', type='bool', default='False',
                    help="Convert mrc to hdf5 (default: False)")
                    
args = parser.parse_args()
start_time = time.time()


# FUNCTION TO CONVERT FROM TXRM TO HDF5
def convert_hdf2mrc(norm_file, tree="TomoNormalized/TomoNormalized", 
                    suffix_description = ""):
    """ Convert from hdf5 to mrc"""
    print("CONVERSION FROM HDF5 TO MRC " + suffix_description 
          + ": -------------------")
    tree_hdf5 = tree + "@" + norm_file
    norm_file = os.path.splitext(norm_file)[0] + ".mrc"
    cmd = ("scipion xmipp_image_convert -i " + tree_hdf5 + " -o " + norm_file)
    print(cmd)
    os.system(cmd)
    return norm_file


def txrm2deconv_pipeline(raw_data_txrm, raw_FF_txrm):

    # CONVERSION FROM TXRM TO HDF5
    print("\nCONVERSION FROM TXRM TO HDF5: -------------------")
    cmd = "txrm2nexus " + raw_data_txrm + " " + raw_FF_txrm + " -o=sb"
    print(cmd)
    os.system(cmd)
    date = raw_data_txrm.split("_")[0]
    ###### Uncomment for test purposes; comment in normal executions
    # raw_hdf5 = "20161203_tomo01_-11348.1.hdf5" #########
    # date = raw_hdf5.split("_")[0]              #########
    ######

    # NORMALIZATION
    print("\nNORMALIZATION: -------------------")
    ###### Comment for tests purposes; uncomment for normal executions
    raw_hdf5 = os.path.splitext(raw_data_txrm)[0] + ".hdf5"
    ######
    cmd = "normalize " + raw_hdf5
    print(cmd)
    os.system(cmd)
    norm_file = os.path.splitext(raw_hdf5)[0] + "_norm.hdf5"
    norm_file_hdf5 = norm_file
    print("\nEXTRACT_ANGLES: -------------------")
    cmd = "extract_angle " + norm_file
    print(cmd)
    os.system(cmd)

    # DECONVOLUTION
    print("\nCONVERTING TO MRC: ---------------")
    norm_file = convert_hdf2mrc(
                norm_file_hdf5, tree="TomoNormalized/TomoNormalized",
                suffix_description = "TO APPLY DECONVOLUTION")

    print("\nDECONVOLUTION: -------------------")
    arguments = [args.zp_size, args.energy, date, norm_file, 
                 args.dx, args.kw, args.thickness, args.psf_dir]
    args_str = " ".join(str(arg) for arg in arguments)
    cmd = "tomo_deconv_wiener " + args_str
    print(cmd)
    os.system(cmd)
    time.sleep(3)
    for fname in os.listdir('.'):
        is_file = os.path.isfile(fname)
        if is_file and ("norm_deconv" in fname and ".mrc" in fname):
            norm_file = fname
            print("Deconvolution has been applied")
            print("Deconvoluted file: " + norm_file)
            break

    # ABSORBANCE STACKS (MINUS NATURAL LOGARITHM: -LN)
    if args.minus_ln:
        print("\nCOMPUTE ABSORBANCE STACKS (-LN): -------------------")
        cmd = "lnstacks " + norm_file
        norm_file = os.path.splitext(norm_file)[0] + "_ln.mrc"
        print(cmd)
        os.system(cmd)
    
    # CONVERT OUTPUT TO HDF5
    ext = os.path.splitext(norm_file)[0]
    if args.hdf5 and ext != "mrc":
        print("\nCONVERSION FROM MRC TO HDF5: -------------------")
        cmd = "mrc2hdf " + norm_file
        print(cmd)
        system.os(cmd)
        norm_file = os.path.splitext(norm_file)[0] + ".hdf5"

    print("Output file is: " + norm_file)

# If input is a 'Tomo projection' stack file and a 'BrightField' stack file
if os.path.isfile(args.filesdir[0]):
    raw_data_txrm = args.filesdir[0]
    raw_FF_txrm = args.filesdir[1]
    txrm2deconv_pipeline(raw_data_txrm, raw_FF_txrm)
# If input is a directory
elif os.path.isdir(args.filesdir[0]):
    tomos_dir_main_folder = args.filesdir[0]
    tomos_dir_subfolders = next(os.walk(tomos_dir_main_folder))[1]
    current_dir = "."
    for raw_tomo_dir in tomos_dir_subfolders:
        raw_tomo_dir = os.path.join(tomos_dir_main_folder, raw_tomo_dir)
        os.chdir(raw_tomo_dir)
        print("\n\n")
        print(os.getcwd())
        for txrm_file in os.listdir(current_dir):
            #print(os.path.join(raw_tomo_dir, txrm_file))
            if "_FF" not in txrm_file and txrm_file.endswith(".txrm"):
                raw_data_txrm = txrm_file
                print(raw_data_txrm)
            elif "_FF" in txrm_file and txrm_file.endswith(".txrm"):
                raw_FF_txrm = txrm_file
                print(raw_FF_txrm)
        txrm2deconv_pipeline(raw_data_txrm, raw_FF_txrm)
        os.chdir("../..")
        
# If input are not files, neither a directory, raise exception
else:
    raise Exception("Input must be files or a single directory")


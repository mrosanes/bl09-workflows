#!/usr/bin/python

"""
(C) Copyright 2015 Marc Rosanes
The program is distributed under the terms of the 
GNU General Public License (or the Lesser GPL).

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""


import os
import time
import argparse
from argparse import RawTextHelpFormatter


def str2bool(v):
    return v.lower() in ("yes", "true", "t", "1")


description = ("Reconstruction: txrm2nexus + normalize + deconvolve"
               + " + absorbance stack + align projections" 
               + " + reconstruction + trim")
parser = argparse.ArgumentParser(description=description,
                                 formatter_class=RawTextHelpFormatter)
parser.register('type', 'bool', str2bool)

# Input files in txrm format
parser.add_argument('raw_data_txrm', type=str, 
                    help='Enter txrm containing raw data stack.')
parser.add_argument('raw_FF_txrm', type=str, 
                    help='Enter txrm containing raw FF stack.')

# Arguments for deconvolution
parser.add_argument('-d', '--deconvolution', type='bool',
                    default='True',
                    help="Deconvolve mrc normalized stacks (default: True)")
parser.add_argument('-zp', '--zp-size', type=int, default=25,
                    help="ZP zones size (in nm)\n"
                         + "(default: 25)")        
parser.add_argument('-e', '--energy', type=int, default=520,
                    help="Energy for deconvolution\n"
                         + "(default: 520)")
parser.add_argument('-dx', type=int, default=12,
                    help="dx for deconvolution \n"
                         + "(default: 12)")  
parser.add_argument('-k', '--kw', type=int, default=0.02,
                    help="kw for deconvolution\n"
                         + "(default: 0.02)")
parser.add_argument('-t', '--thickness', type=int, default=20,
                    help="Sample thickness for deconvolution (in um)\n"
                         + "(default: 20)")
psf_dir = "/beamlines/bl09/controls/user_resources/psf_directory"
parser.add_argument('-p', '--psf-dir', type=str, default=psf_dir, 
                    help="PSF directory\n"
                         + "(default: " + psf_dir + " )")

# Absorbance stack (Minus napierian logarithm of transmittance stack)  
parser.add_argument('-l', '--minus_ln', type='bool', default='True',
                    help="Compute absorbance stack [-ln(mrc)]\n"
                         + "(default: True)")

# Convert output to hdf5
parser.add_argument('-hd', '--hdf5', type='bool', default='False',
                    help="Convert mrc to hdf5 (default: False)")
                    
args = parser.parse_args()
start_time = time.time()


# FUNCTION TO CONVERT FROM TXRM TO HDF5
def convert_hdf2mrc(norm_file, tree="TomoNormalized/TomoNormalized", 
                    suffix_description = ""):
    """ Convert from hdf5 to mrc"""
    print("CONVERSION FROM HDF5 TO MRC " + suffix_description 
          + ": -------------------")
    tree_hdf5 = tree + "@" + norm_file
    norm_file = os.path.splitext(norm_file)[0] + ".mrc"
    cmd = ("scipion xmipp_image_convert -i " + tree_hdf5 + " -o " + norm_file)
    print(cmd)
    os.system(cmd)
    return norm_file


# CONVERSION FROM TXRM TO HDF5
print("CONVERSION FROM TXRM TO HDF5: -------------------")
raw_data_txrm = args.raw_data_txrm
raw_FF_txrm = args.raw_FF_txrm
cmd = "txrm2nexus " + raw_data_txrm + " " + raw_FF_txrm + " -o=sb"
print(cmd)
os.system(cmd)
date = raw_data_txrm.split("_")[0]


############ Only for test purposes; do not use in normal executions
# raw_hdf5 = "20161203_tomo01_-11348.1.hdf5" ######### To be removed
# date = raw_hdf5.split("_")[0]
############

# NORMALIZATION
print("NORMALIZATION: -------------------")
raw_hdf5 = os.path.splitext(raw_data_txrm)[0] + ".hdf5" # Comment for tests
cmd = "normalize " + raw_hdf5
print(cmd)
os.system(cmd)
norm_file = os.path.splitext(raw_hdf5)[0] + "_norm.hdf5"
norm_file_hdf5 = norm_file
print("EXTRACT_ANGLES: -------------------")
cmd = "extract_angle " + norm_file
print(cmd)
os.system(cmd)

# DECONVOLUTION
elif args.deconvolution:
    print("CONVERTING TO MRC: ---------------")
    norm_file = convert_hdf2mrc(
                norm_file_hdf5, tree="TomoNormalized/TomoNormalized",
                suffix_description = "TO APPLY DECONVOLUTION")

    print("DECONVOLUTION: -------------------")
    arguments = [args.zp_size, args.energy, date, norm_file, 
                 args.dx, args.kw, args.thickness, args.psf_dir]
    args_str = " ".join(str(arg) for arg in arguments)
    cmd = "tomo_deconv_wiener " + args_str
    print(cmd)
    os.system(cmd)
    time.sleep(2)
    print("Deconvolution has been applied")
    for fname in os.listdir('.'):
        if os.path.isfile(fname) and ("norm_deconv" and ".mrc") in fname:
            norm_file = fname
            print("Deconvoluted file: " + norm_file)
            break

# ABSORBANCE STACKS (MINUS NATURAL LOGARITHM: -LN)
if args.minus_ln:
    print("COMPUTE ABSORBANCE STACKS (-LN): -------------------")
    cmd = "lnstacks " + norm_file
    norm_file = os.path.splitext(norm_file)[0] + "_ln.mrc"
    print(cmd)
    os.system(cmd)
   
# CONVERT OUTPUT TO HDF5
ext = os.path.splitext(norm_file)[0]
if args.hdf5 and ext != "mrc":
    print("CONVERSION FROM MRC TO HDF5: -------------------")
    cmd = "mrc2hdf " + norm_file
    print(cmd)
    system.os(cmd)
    norm_file = os.path.splitext(norm_file)[0] + ".hdf5"

print("Output file is: " + norm_file)


